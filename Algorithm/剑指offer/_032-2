#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<vector>
#include<iterator>
#include<algorithm>
#include<stack>


#include <queue>
using namespace std;

/*
 * 分行层次打印出二叉树
 * 相较于层次遍历 多需要两个变量，一个用来表示当前层中还没有打印的节点；tobePrint
 * 另一个表述下一层节点数目nextlevel
 *
 *
 */

struct BinaryTreeNode{
    int data;
    BinaryTreeNode* left;
    BinaryTreeNode* right;


};

void layingPrint(BinaryTreeNode* pRoot)

{
    if(pRoot==NULL)
        return ;
    std::queue<BinaryTreeNode*> nodes;//使用队列来存储
    nodes.push(pRoot);
    int nextLevel=0;
    int tobePrint=1;
    while(!nodes.empty()) {
        BinaryTreeNode *p = nodes.front();//取对头元素
        cout << p->data;
        if (p->left != NULL)//将左右孩子入队
        {
            nodes.push(p->left);
            ++nextLevel;
            
        }
        if(p->right!=NULL)
        {
            nodes.push(p->right);
            ++nextLevel;
            
        }
        nodes.pop();
        --tobePrint;
        if(tobePrint==0)
        {
            tobePrint=nextLevel;
            nextLevel=0;
            
        }
        
        
            
            
    }


}

